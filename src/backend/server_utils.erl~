-module(server_utils).
-compile([translate_package/1, now_as_string_millis/0, list_to_regexp/2, flatten_tuples_to_list/1).

translate_package({ID}) ->
    translate_package({ID, [now_as_string_millis()]});
translate_package({ID, Message}) ->
    list_to_binary(list_to_regexp([integer_to_list(ID) | [now_as_string_millis() | Message]], ?RegExpSeperator));

%% Translates from a regexp to a tuple with ID and message

translate_package(Message) ->
    [Message_ID | [Timestamp | Message_list]] = lists:map(fun binary_to_list/1, lists:droplast(re:split(Message, ?RegExpSeperator))),
    case Message_list of
	[] -> {list_to_integer(Timestamp), {list_to_integer(Message_ID)}};
	_  -> {list_to_integer(Timestamp), {list_to_integer(Message_ID), Message_list}}
    end.

now_as_string_millis() ->
    {Mega_S, S, Micro_S} = now(),
    lists:append(lists:append(integer_to_list(Mega_S), integer_to_list(S)), integer_to_list(Micro_S div 1000)).  

    


list_to_regexp([Tail | []], _) ->
    string:concat(
      case is_integer(Tail) of
	  true -> integer_to_list(Tail);
	  _ -> Tail
      end,
      "&\n");
list_to_regexp([Head | Tail], Seperator) ->
    string:concat(string:concat(
		    case is_integer(Head) of 
			true -> integer_to_list(Head); 
			_ -> Head 
		    end,
		    Seperator), list_to_regexp(Tail, Seperator)).

flatten_tuples_to_list(Tuple) ->
    flatten_tuples_to_list([Tuple], []).

flatten_tuples_to_list([], Acc) ->
    Acc;

flatten_tuples_to_list([Head | Tuple_list], Acc) when is_tuple(Head)->
    flatten_tuples_to_list(lists:append(tuple_to_list(Head), Tuple_list), Acc);

flatten_tuples_to_list([Head | Tuples_list], Acc) ->
    flatten_tuples_to_list(Tuples_list, lists:append(Acc, [Head])).
